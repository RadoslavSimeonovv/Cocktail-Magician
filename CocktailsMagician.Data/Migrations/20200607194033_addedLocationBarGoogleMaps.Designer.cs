// <auto-generated />
using System;
using CocktailsMagician.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CocktailsMagician.Data.Migrations
{
    [DbContext(typeof(CMContext))]
    [Migration("20200607194033_addedLocationBarGoogleMaps")]
    partial class addedLocationBarGoogleMaps
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CocktailsMagician.Data.Entities.Bar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("AvgRating")
                        .HasColumnType("float");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UnlistedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.ToTable("Bars");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5fedc033-16db-4d62-b5e6-20eb3a056ead"),
                            Address = "at the corner of Angel Kanchev and Solunska",
                            AvgRating = 0.0,
                            CityId = new Guid("68fee6bf-edd0-4121-8b06-37f0c7e11d4a"),
                            Description = "Is incomparable pleasure to have a cup of coffee under the shade of linden trees and greenery of the park in close proximity to the coolness of the fountain. ",
                            Latitude = 0.0,
                            Longitude = 0.0,
                            Name = "Pavement",
                            Phone = "0877151152",
                            Website = "https://www.facebook.com/pages/%D0%91%D0%B0%D1%80-%D0%9F%D0%B0%D0%B2%D0%B0%D0%B6/662197613861829"
                        },
                        new
                        {
                            Id = new Guid("e3be83dd-0c12-41d0-9f05-56554ad74a2d"),
                            Address = "31 Morska Str.",
                            AvgRating = 0.0,
                            CityId = new Guid("51d75009-3674-4a35-92f1-48a4981d26bb"),
                            Description = "We chose the heart of Burgas, just a few steps away from the sea coast, to create the oasis of the pleasure for you. With the commercial music background we offer perfect conditions for the morning cup of coffee or the cocktail at sunset. ",
                            Latitude = 0.0,
                            Longitude = 0.0,
                            Name = "Foket Bar",
                            Phone = "0888050505",
                            Website = "http://www.facebook.com/%D0%9A%D0%B0%D1%84%D0%B5-%D0%A4%D0%BE%D0%BA%D0%B5%D1%82-348364438530436/"
                        },
                        new
                        {
                            Id = new Guid("92a05c62-6f33-4dc9-bcc1-c9c946bf693a"),
                            Address = "62 Prof. Marin Drinov Str.",
                            AvgRating = 0.0,
                            CityId = new Guid("cc44371d-594f-4c47-a82b-e606bede8d3b"),
                            Description = "Very nice bar",
                            Latitude = 0.0,
                            Longitude = 0.0,
                            Name = "Pappa's Bar",
                            Phone = "0898878465",
                            Website = "-"
                        },
                        new
                        {
                            Id = new Guid("1f573fa6-3cc0-48ad-8850-ee7675cc3096"),
                            Address = "40 Saborna Str.",
                            AvgRating = 0.0,
                            CityId = new Guid("e3e92ad8-b117-42a8-b263-ec351d9234fc"),
                            Description = "Live music",
                            Latitude = 0.0,
                            Longitude = 0.0,
                            Name = "Konyushnite",
                            Phone = "0899516116",
                            Website = "https://www.facebook.com/barkonushnite/"
                        });
                });

            modelBuilder.Entity("CocktailsMagician.Data.Entities.BarCocktail", b =>
                {
                    b.Property<Guid>("BarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CocktailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UnlistedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("BarId", "CocktailId");

                    b.HasIndex("CocktailId");

                    b.ToTable("BarCocktails");
                });

            modelBuilder.Entity("CocktailsMagician.Data.Entities.BarReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("BarId", "UserId")
                        .IsUnique();

                    b.ToTable("BarReviews");

                    b.HasData(
                        new
                        {
                            Id = new Guid("162a3202-b5d8-495a-a9d8-76b1974d3525"),
                            BarId = new Guid("e3be83dd-0c12-41d0-9f05-56554ad74a2d"),
                            Comment = "Very nice and cosy place",
                            Rating = 5,
                            ReviewedOn = new DateTime(2020, 6, 7, 19, 40, 32, 619, DateTimeKind.Utc).AddTicks(8125),
                            UserId = new Guid("ad513447-0536-432b-a848-ea96ade0040d")
                        },
                        new
                        {
                            Id = new Guid("d277aee1-8292-4d39-a347-77b9da349c54"),
                            BarId = new Guid("1f573fa6-3cc0-48ad-8850-ee7675cc3096"),
                            Comment = "Not bad",
                            Rating = 3,
                            ReviewedOn = new DateTime(2020, 6, 7, 19, 40, 32, 619, DateTimeKind.Utc).AddTicks(9047),
                            UserId = new Guid("ad513447-0536-432b-a848-ea96ade0040d")
                        },
                        new
                        {
                            Id = new Guid("5549a94f-081a-4491-a386-022bd3fe2c4b"),
                            BarId = new Guid("e3be83dd-0c12-41d0-9f05-56554ad74a2d"),
                            Comment = "It is fuckin hole",
                            Rating = 2,
                            ReviewedOn = new DateTime(2020, 6, 7, 19, 40, 32, 619, DateTimeKind.Utc).AddTicks(9088),
                            UserId = new Guid("a137730d-bb81-4611-8fb8-bb777aae86ac")
                        },
                        new
                        {
                            Id = new Guid("2790a53d-b5ea-4ba6-a651-eb3e79f8db7f"),
                            BarId = new Guid("1f573fa6-3cc0-48ad-8850-ee7675cc3096"),
                            Comment = "Very nice place to drink and listen live music.",
                            Rating = 5,
                            ReviewedOn = new DateTime(2020, 6, 7, 19, 40, 32, 619, DateTimeKind.Utc).AddTicks(9101),
                            UserId = new Guid("a137730d-bb81-4611-8fb8-bb777aae86ac")
                        });
                });

            modelBuilder.Entity("CocktailsMagician.Data.Entities.BarReviewLike", b =>
                {
                    b.Property<Guid>("BarReviewId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsInappropriate")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLiked")
                        .HasColumnType("bit");

                    b.HasKey("BarReviewId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("BarReviewLikes");

                    b.HasData(
                        new
                        {
                            BarReviewId = new Guid("5549a94f-081a-4491-a386-022bd3fe2c4b"),
                            UserId = new Guid("ad513447-0536-432b-a848-ea96ade0040d"),
                            IsInappropriate = true,
                            IsLiked = false
                        },
                        new
                        {
                            BarReviewId = new Guid("d277aee1-8292-4d39-a347-77b9da349c54"),
                            UserId = new Guid("a137730d-bb81-4611-8fb8-bb777aae86ac"),
                            IsInappropriate = false,
                            IsLiked = true
                        });
                });

            modelBuilder.Entity("CocktailsMagician.Data.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UnlistedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("68fee6bf-edd0-4121-8b06-37f0c7e11d4a"),
                            Name = "Sofia"
                        },
                        new
                        {
                            Id = new Guid("e3e92ad8-b117-42a8-b263-ec351d9234fc"),
                            Name = "Plovdiv"
                        },
                        new
                        {
                            Id = new Guid("cc44371d-594f-4c47-a82b-e606bede8d3b"),
                            Name = "Varna"
                        },
                        new
                        {
                            Id = new Guid("51d75009-3674-4a35-92f1-48a4981d26bb"),
                            Name = "Burgas"
                        },
                        new
                        {
                            Id = new Guid("50b800ab-bdec-48fa-8951-aaf2e2f19782"),
                            Name = "Veliko Tarnovo"
                        });
                });

            modelBuilder.Entity("CocktailsMagician.Data.Entities.Cocktail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("AvgRating")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UnlistedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Cocktails");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0961dd49-79f4-4d85-ab15-7844d602e076"),
                            AvgRating = 0.0,
                            Description = "Master this all-time gin classic. The Tom Collins is essentially a sparkling lemonade spiked with a healthy dose of the juniper-centric spirit. While there is a debate raging about which side of the pond this drink hails from, this cocktail lives up to its classic status with every sip.",
                            Name = "Tom Collins"
                        },
                        new
                        {
                            Id = new Guid("9ef97551-87f6-40ce-a88b-6c0e876ccb51"),
                            AvgRating = 0.0,
                            Description = "The Margarita is one of the most popular cocktails in North America—for good reason. Combining the tang of lime and the sweetness of orange liqueur with the distinctive strength of tequila, our classic Margarita strikes all of the right keys.",
                            Name = "Margarita"
                        },
                        new
                        {
                            Id = new Guid("96a5f42a-e14d-4cf6-834c-368f4e77076c"),
                            AvgRating = 0.0,
                            Description = "You could stumble down a very deep, very dark rabbit hole trying to determine who mixed the world’s first Martini. Was it a California prospector during the 1849 Gold Rush or the barman at a flossy New York City hotel 50 years later? Both stories hold water. Neither will leave you feeling as blissful and content as a well-made Dry Martini.",
                            Name = "Dry Martini"
                        },
                        new
                        {
                            Id = new Guid("74d3f564-5811-4eda-97d6-e39d6bbd35a9"),
                            AvgRating = 0.0,
                            Description = "The legendary Cosmopolitan is a simple cocktail with a big history. It reached its height of popularity in the 1990s, when the HBO show “Sex and the City” was at its peak. The pink-hued Martini was a favorite of the characters on the show.",
                            Name = "Cosmopolitan"
                        },
                        new
                        {
                            Id = new Guid("8a15e590-0b66-4fae-abfa-d75812b76da6"),
                            AvgRating = 0.0,
                            Description = "The White Russian is decadent and sophisticated. Combining vodka, Kahlúa and cream and serving it on the rocks create a delicious alternative to adult milkshakes. The Dude's favourite one.",
                            Name = "White Russian"
                        });
                });

            modelBuilder.Entity("CocktailsMagician.Data.Entities.CocktailIngredients", b =>
                {
                    b.Property<Guid>("CocktailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IngredientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UnlistedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("CocktailId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.ToTable("CocktailIngredients");

                    b.HasData(
                        new
                        {
                            CocktailId = new Guid("8a15e590-0b66-4fae-abfa-d75812b76da6"),
                            IngredientId = new Guid("c5651f9b-a02c-4a87-9be0-cddf9ce07b98")
                        },
                        new
                        {
                            CocktailId = new Guid("8a15e590-0b66-4fae-abfa-d75812b76da6"),
                            IngredientId = new Guid("829f36d4-1ac9-438c-a653-964890eeff58")
                        },
                        new
                        {
                            CocktailId = new Guid("8a15e590-0b66-4fae-abfa-d75812b76da6"),
                            IngredientId = new Guid("e393a0e6-c687-40e6-a0f1-e38032dfb693")
                        },
                        new
                        {
                            CocktailId = new Guid("96a5f42a-e14d-4cf6-834c-368f4e77076c"),
                            IngredientId = new Guid("d8b1f1e3-b6a7-4e6d-8abe-2aa1db4abbe4")
                        },
                        new
                        {
                            CocktailId = new Guid("96a5f42a-e14d-4cf6-834c-368f4e77076c"),
                            IngredientId = new Guid("9d4efae0-c48a-4b65-908a-6597658be6f8")
                        },
                        new
                        {
                            CocktailId = new Guid("96a5f42a-e14d-4cf6-834c-368f4e77076c"),
                            IngredientId = new Guid("db3d1530-7f55-40c9-82dd-10428c8e8dcc")
                        },
                        new
                        {
                            CocktailId = new Guid("96a5f42a-e14d-4cf6-834c-368f4e77076c"),
                            IngredientId = new Guid("1b98e50e-8314-4b1e-82df-491c3c8d086f")
                        });
                });

            modelBuilder.Entity("CocktailsMagician.Data.Entities.CocktailReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CocktailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("CocktailId", "UserId")
                        .IsUnique();

                    b.ToTable("CocktailReviews");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d7047a3a-7b5e-4eb5-8ed2-c846b7a4d5ce"),
                            CocktailId = new Guid("9ef97551-87f6-40ce-a88b-6c0e876ccb51"),
                            Comment = "Too sour",
                            Rating = 1,
                            ReviewedOn = new DateTime(2020, 6, 7, 19, 40, 32, 620, DateTimeKind.Utc).AddTicks(5495),
                            UserId = new Guid("ad513447-0536-432b-a848-ea96ade0040d")
                        },
                        new
                        {
                            Id = new Guid("11c58b41-f0db-480d-bbe5-115bc027f868"),
                            CocktailId = new Guid("0961dd49-79f4-4d85-ab15-7844d602e076"),
                            Comment = "Piece of shit",
                            Rating = 1,
                            ReviewedOn = new DateTime(2020, 6, 7, 19, 40, 32, 620, DateTimeKind.Utc).AddTicks(6086),
                            UserId = new Guid("ad513447-0536-432b-a848-ea96ade0040d")
                        },
                        new
                        {
                            Id = new Guid("febc5720-77ef-444b-b3fd-d440af2a9359"),
                            CocktailId = new Guid("9ef97551-87f6-40ce-a88b-6c0e876ccb51"),
                            Comment = "Perfect for summer",
                            Rating = 5,
                            ReviewedOn = new DateTime(2020, 6, 7, 19, 40, 32, 620, DateTimeKind.Utc).AddTicks(6115),
                            UserId = new Guid("a137730d-bb81-4611-8fb8-bb777aae86ac")
                        },
                        new
                        {
                            Id = new Guid("16e1a85a-1d0f-4c42-b7dc-64efc096eb51"),
                            CocktailId = new Guid("0961dd49-79f4-4d85-ab15-7844d602e076"),
                            Comment = "Not bad.",
                            Rating = 3,
                            ReviewedOn = new DateTime(2020, 6, 7, 19, 40, 32, 620, DateTimeKind.Utc).AddTicks(6123),
                            UserId = new Guid("a137730d-bb81-4611-8fb8-bb777aae86ac")
                        });
                });

            modelBuilder.Entity("CocktailsMagician.Data.Entities.CocktailReviewLike", b =>
                {
                    b.Property<Guid>("CocktailReviewId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsInappropriate")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLiked")
                        .HasColumnType("bit");

                    b.HasKey("CocktailReviewId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("CocktailReviewLikes");

                    b.HasData(
                        new
                        {
                            CocktailReviewId = new Guid("11c58b41-f0db-480d-bbe5-115bc027f868"),
                            UserId = new Guid("a137730d-bb81-4611-8fb8-bb777aae86ac"),
                            IsInappropriate = true,
                            IsLiked = false
                        },
                        new
                        {
                            CocktailReviewId = new Guid("febc5720-77ef-444b-b3fd-d440af2a9359"),
                            UserId = new Guid("a137730d-bb81-4611-8fb8-bb777aae86ac"),
                            IsInappropriate = false,
                            IsLiked = true
                        });
                });

            modelBuilder.Entity("CocktailsMagician.Data.Entities.Ingredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Abv")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UnlistedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("TypeId");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1b98e50e-8314-4b1e-82df-491c3c8d086f"),
                            Abv = 40.0,
                            Description = "Gin is a distilled alcoholic drink that derives its predominant flavour from juniper berries (Juniperus communis). Gin is one of the broadest categories of spirits, all of various origins, styles, and flavour profiles, that revolve around juniper as a common ingredient.",
                            Name = "Gin",
                            TypeId = new Guid("24cd3f18-f0a8-4f66-bc5b-2108e099cf53")
                        },
                        new
                        {
                            Id = new Guid("8f799a3d-47cb-40e3-aeb4-a9fe80811360"),
                            Abv = 40.0,
                            Description = "Whisky or whiskey is a type of distilled alcoholic beverage made from fermented grain mash. Various grains (which may be malted) are used for different varieties, including barley, corn, rye, and wheat. Whisky is typically aged in wooden casks, generally made of charred white oak.",
                            Name = "Whisky",
                            TypeId = new Guid("2fd6a412-0117-4a62-a608-494e414c9c03")
                        },
                        new
                        {
                            Id = new Guid("4039e0f3-8d2d-43a5-a82b-477e42371cd6"),
                            Abv = 0.0,
                            Description = "",
                            Name = "Martini Extra Dry",
                            TypeId = new Guid("c237a265-dd68-4218-a6a4-4eb7465e512f")
                        },
                        new
                        {
                            Id = new Guid("9d4efae0-c48a-4b65-908a-6597658be6f8"),
                            Abv = 0.0,
                            Description = "",
                            Name = "Martini Dry",
                            TypeId = new Guid("c237a265-dd68-4218-a6a4-4eb7465e512f")
                        },
                        new
                        {
                            Id = new Guid("7d4c332d-c016-4594-9a46-4e1b0cd22955"),
                            Abv = 0.0,
                            Description = "",
                            Name = "Orange juice",
                            TypeId = new Guid("265dcf12-bcfc-43d3-93a6-6c48c97d51bc")
                        },
                        new
                        {
                            Id = new Guid("b91ed0c3-b009-4c83-993e-9acc4b0e384f"),
                            Abv = 0.0,
                            Description = "-",
                            Name = "Peppermint",
                            TypeId = new Guid("1b98e50e-8314-4b1e-82df-491c3c8d086f")
                        },
                        new
                        {
                            Id = new Guid("829f36d4-1ac9-438c-a653-964890eeff58"),
                            Abv = 20.0,
                            Description = "Kahlua is a coffee-flavored liqueur from Mexico. The drink contains rum, sugar, vanilla bean, and arabica coffee.",
                            Name = "Kahlua",
                            TypeId = new Guid("4a399308-dec0-4161-a679-18b4898c7e4b")
                        },
                        new
                        {
                            Id = new Guid("e89fd1c6-532e-42e0-8024-a2ff9c600006"),
                            Abv = 40.0,
                            Description = "Tequila is a distilled beverage made from the blue agave plant, primarily in the area surrounding the city of Tequila 65 km (40 mi) northwest of Guadalajara",
                            Name = "Tequila",
                            TypeId = new Guid("90ec3674-7a5c-4e8f-9a5f-d3aeef5e6c2e")
                        },
                        new
                        {
                            Id = new Guid("c5651f9b-a02c-4a87-9be0-cddf9ce07b98"),
                            Abv = 40.0,
                            Description = "Vodka is a clear distilled alcoholic beverage with different varieties originating in Poland and Russia. It is composed primarily of water and ethanol, but sometimes with traces of impurities and flavorings. Traditionally it is made by distilling the liquid from potatoes or cereal grains that have been fermented, though some modern brands use fruits or sugar as the base.",
                            Name = "Vodka",
                            TypeId = new Guid("3c93e448-aa7f-40f9-b66f-fdf98b66053c")
                        },
                        new
                        {
                            Id = new Guid("e393a0e6-c687-40e6-a0f1-e38032dfb693"),
                            Abv = 0.0,
                            Description = "-",
                            Name = "Heavy cream",
                            TypeId = new Guid("b54d35b5-1a1e-4da8-af73-46814ecdf240")
                        },
                        new
                        {
                            Id = new Guid("d8b1f1e3-b6a7-4e6d-8abe-2aa1db4abbe4"),
                            Abv = 34.0,
                            Description = "Orange bitters is a form of bitters, a cocktail flavoring made from such ingredients as the peels of Seville oranges, cardamom, caraway seed, coriander, anise, and burnt sugar in an alcohol base.",
                            Name = "Orange bitter",
                            TypeId = new Guid("e393a0e6-c687-40e6-a0f1-e38032dfb693")
                        },
                        new
                        {
                            Id = new Guid("db3d1530-7f55-40c9-82dd-10428c8e8dcc"),
                            Abv = 0.0,
                            Description = "",
                            Name = "Lemon",
                            TypeId = new Guid("a13131de-cef0-4e94-9742-b698fa911de3")
                        });
                });

            modelBuilder.Entity("CocktailsMagician.Data.Entities.IngredientType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UnlistedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("IngredientTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3c93e448-aa7f-40f9-b66f-fdf98b66053c"),
                            Name = "Vodka"
                        },
                        new
                        {
                            Id = new Guid("2fd6a412-0117-4a62-a608-494e414c9c03"),
                            Name = "Whisky"
                        },
                        new
                        {
                            Id = new Guid("4a399308-dec0-4161-a679-18b4898c7e4b"),
                            Name = "Liqeur"
                        },
                        new
                        {
                            Id = new Guid("67ffa75b-d067-4d77-a98d-99e203f4ad45"),
                            Name = "Brendy"
                        },
                        new
                        {
                            Id = new Guid("90ec3674-7a5c-4e8f-9a5f-d3aeef5e6c2e"),
                            Name = "Tequila"
                        },
                        new
                        {
                            Id = new Guid("c237a265-dd68-4218-a6a4-4eb7465e512f"),
                            Name = "Vermouth"
                        },
                        new
                        {
                            Id = new Guid("24cd3f18-f0a8-4f66-bc5b-2108e099cf53"),
                            Name = "Gin"
                        },
                        new
                        {
                            Id = new Guid("d949ac47-e51f-4a05-823e-d14c652d94da"),
                            Name = "Cognac"
                        },
                        new
                        {
                            Id = new Guid("27309394-4ac3-4dc6-a81a-c8e147e378f0"),
                            Name = "Burbon"
                        },
                        new
                        {
                            Id = new Guid("619ac43c-075a-47be-befc-c68249054b85"),
                            Name = "Rum"
                        },
                        new
                        {
                            Id = new Guid("8ff6497e-800b-43ac-8f53-9492e38d60a1"),
                            Name = "Tonic"
                        },
                        new
                        {
                            Id = new Guid("265dcf12-bcfc-43d3-93a6-6c48c97d51bc"),
                            Name = "Juice"
                        },
                        new
                        {
                            Id = new Guid("62bfb206-9d01-41cc-be6b-161faf95de55"),
                            Name = "Soda"
                        },
                        new
                        {
                            Id = new Guid("d45a9b74-04d4-4584-a25f-78a8692bbc31"),
                            Name = "Cola"
                        },
                        new
                        {
                            Id = new Guid("a13131de-cef0-4e94-9742-b698fa911de3"),
                            Name = "Fruit"
                        },
                        new
                        {
                            Id = new Guid("1b98e50e-8314-4b1e-82df-491c3c8d086f"),
                            Name = "Herbs"
                        },
                        new
                        {
                            Id = new Guid("8f799a3d-47cb-40e3-aeb4-a9fe80811360"),
                            Name = "Wine"
                        },
                        new
                        {
                            Id = new Guid("4039e0f3-8d2d-43a5-a82b-477e42371cd6"),
                            Name = "Others"
                        },
                        new
                        {
                            Id = new Guid("b54d35b5-1a1e-4da8-af73-46814ecdf240"),
                            Name = "Cream"
                        },
                        new
                        {
                            Id = new Guid("e393a0e6-c687-40e6-a0f1-e38032dfb693"),
                            Name = "Bitter"
                        });
                });

            modelBuilder.Entity("CocktailsMagician.Data.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1286919b-3fc1-484d-80ad-9aea8e55ac37"),
                            ConcurrencyStamp = "c56fc50a-5f68-4e7d-838b-dc064a59ea09",
                            Description = "Admin role",
                            Name = "Admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = new Guid("f4fd169e-b855-496a-8d76-8c7720b60f46"),
                            ConcurrencyStamp = "d921ef64-4fb3-4f8a-83e7-e9d3b3fb41dd",
                            Description = "User role",
                            Name = "User",
                            NormalizedName = "user"
                        });
                });

            modelBuilder.Entity("CocktailsMagician.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("isBanned")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a137730d-bb81-4611-8fb8-bb777aae86ac"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7fc4169a-5bb5-411f-900d-5953f3c09760",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bvuchev@abv.bg",
                            EmailConfirmed = false,
                            FirstName = "Boyan",
                            LastName = "Vuchev",
                            LockoutEnabled = true,
                            NormalizedEmail = "BVUCHEV@ABV.BG",
                            NormalizedUserName = "BVUCHEV@ABV.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAEB1X1JsgPvGvsMm+cx/ZKOPRDU0xyTv09RFwFbLXF4u7GSdnGjKFDv86rcfGFq7rbA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "DC6E275DD1E24957A7781D42BB68293B",
                            TwoFactorEnabled = false,
                            UserName = "bvuchev@abv.bg",
                            isBanned = false
                        },
                        new
                        {
                            Id = new Guid("ad513447-0536-432b-a848-ea96ade0040d"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cb7fa1ed-9e7c-4c7e-a0ff-fc9ee02e7b8d",
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "rsimeonov@abv.bg",
                            EmailConfirmed = false,
                            FirstName = "Radoslav",
                            LastName = "Simeonov",
                            LockoutEnabled = true,
                            NormalizedEmail = "RSIMEONOV@ABV.BG",
                            NormalizedUserName = "RSIMEONOV@ABV.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAEFJ7Mf/unmxD/MApFbZYyeC8QGnkqNnPkEFfQMYxHadBZ39MPCxVpkN/nj06cxecjw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "HNWQ7GQFUMWKGOAWSJNC5XV2VFYQRWHC",
                            TwoFactorEnabled = false,
                            UserName = "rsimeonov@abv.bg",
                            isBanned = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("a137730d-bb81-4611-8fb8-bb777aae86ac"),
                            RoleId = new Guid("1286919b-3fc1-484d-80ad-9aea8e55ac37")
                        },
                        new
                        {
                            UserId = new Guid("ad513447-0536-432b-a848-ea96ade0040d"),
                            RoleId = new Guid("f4fd169e-b855-496a-8d76-8c7720b60f46")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CocktailsMagician.Data.Entities.Bar", b =>
                {
                    b.HasOne("CocktailsMagician.Data.Entities.City", "City")
                        .WithMany("Bars")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CocktailsMagician.Data.Entities.BarCocktail", b =>
                {
                    b.HasOne("CocktailsMagician.Data.Entities.Bar", "Bar")
                        .WithMany()
                        .HasForeignKey("BarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailsMagician.Data.Entities.Cocktail", "Cocktail")
                        .WithMany()
                        .HasForeignKey("CocktailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CocktailsMagician.Data.Entities.BarReview", b =>
                {
                    b.HasOne("CocktailsMagician.Data.Entities.Bar", "Bar")
                        .WithMany("BarReviews")
                        .HasForeignKey("BarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailsMagician.Data.Entities.User", "User")
                        .WithMany("BarReviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CocktailsMagician.Data.Entities.BarReviewLike", b =>
                {
                    b.HasOne("CocktailsMagician.Data.Entities.BarReview", "BarReview")
                        .WithMany("BarReviewLikes")
                        .HasForeignKey("BarReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailsMagician.Data.Entities.User", "User")
                        .WithMany("BarReviewLikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("CocktailsMagician.Data.Entities.CocktailIngredients", b =>
                {
                    b.HasOne("CocktailsMagician.Data.Entities.Cocktail", "Cocktail")
                        .WithMany()
                        .HasForeignKey("CocktailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailsMagician.Data.Entities.Ingredient", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CocktailsMagician.Data.Entities.CocktailReview", b =>
                {
                    b.HasOne("CocktailsMagician.Data.Entities.Cocktail", "Cocktail")
                        .WithMany("CocktailReviews")
                        .HasForeignKey("CocktailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailsMagician.Data.Entities.User", "User")
                        .WithMany("CocktailReviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CocktailsMagician.Data.Entities.CocktailReviewLike", b =>
                {
                    b.HasOne("CocktailsMagician.Data.Entities.CocktailReview", "CocktailReview")
                        .WithMany("CocktailReviewLikes")
                        .HasForeignKey("CocktailReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailsMagician.Data.Entities.User", "User")
                        .WithMany("CocktailReviewLikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("CocktailsMagician.Data.Entities.Ingredient", b =>
                {
                    b.HasOne("CocktailsMagician.Data.Entities.IngredientType", "Type")
                        .WithMany("Ingredients")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("CocktailsMagician.Data.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("CocktailsMagician.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("CocktailsMagician.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("CocktailsMagician.Data.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CocktailsMagician.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("CocktailsMagician.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
